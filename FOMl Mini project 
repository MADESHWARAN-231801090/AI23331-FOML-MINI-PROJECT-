{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "798884ce-b4b7-4178-ac85-6c56a547a0ba",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (3.9.1)\n",
      "Requirement already satisfied: click in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from nltk) (8.1.7)\n",
      "Requirement already satisfied: joblib in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: regex>=2021.8.3 in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from nltk) (2024.9.11)\n",
      "Requirement already satisfied: tqdm in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from nltk) (4.66.6)\n",
      "Requirement already satisfied: colorama in c:\\users\\ruba rajan\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from click->nltk) (0.4.6)\n"
     ]
    }
   ],
   "source": [
    "!pip install nltk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6e41f88b-950f-4b0c-bd6e-6a09e9c19032",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading vader_lexicon: <urlopen error [Errno 11001]\n",
      "[nltk_data]     getaddrinfo failed>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.sentiment import SentimentIntensityAnalyzer\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Download VADER lexicon\n",
    "nltk.download('vader_lexicon')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bdf59cd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter text inputs for sentiment analysis (type 'done' when finished):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter text:  today is a wonder ful day\n",
      "Enter text:  bad day\n",
      "Enter text:  done\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User input collected:\n",
      "                        text\n",
      "0  today is a wonder ful day\n",
      "1                    bad day\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Prompt the user for input data and store it in a list\n",
    "user_input = []\n",
    "print(\"Enter text inputs for sentiment analysis (type 'done' when finished):\")\n",
    "while True:\n",
    "    text = input(\"Enter text: \")\n",
    "    if text.lower() == 'done':\n",
    "        break\n",
    "    user_input.append(text)\n",
    "\n",
    "# Convert input data to a DataFrame for analysis\n",
    "df = pd.DataFrame({'text': user_input})\n",
    "print(\"User input collected:\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "08dffe52-612e-4431-a560-62949cdd492b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize VADER sentiment analyzer\n",
    "sia = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "19ef2b50-2f11-4520-b346-a227393597b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to analyze sentiment and return score and label\n",
    "def analyze_sentiment(text):\n",
    "    score = sia.polarity_scores(text)\n",
    "    if score['compound'] >= 0.05:\n",
    "        sentiment = 'Positive'\n",
    "    elif score['compound'] <= -0.05:\n",
    "        sentiment = 'Negative'\n",
    "    else:\n",
    "        sentiment = 'Neutral'\n",
    "    return score['compound'], sentiment\n",
    "\n",
    "# Apply function to DataFrame\n",
    "df[['sentiment_score', 'sentiment_label']] = df['text'].apply(analyze_sentiment).apply(pd.Series)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "26316264-bc08-4107-983d-149c6b4bf802",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        text  sentiment_score sentiment_label\n",
      "0  today is a wonder ful day           0.0000         Neutral\n",
      "1                    bad day          -0.5423        Negative\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2155e3b9-6e7b-47b9-82b5-6d8296448ce2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting sentiment scores\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.bar(df['text'], df['sentiment_score'], color=['green' if x == 'Positive' else 'red' if x == 'Negative' else 'gray' for x in df['sentiment_label']])\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.title('Sentiment Scores of Sample Texts')\n",
    "plt.xlabel('Text')\n",
    "plt.ylabel('Sentiment Score')\n",
    "plt.axhline(0, color='black', lw=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d387f5a-ecc6-4ec8-afc7-4b38f6af0de9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
